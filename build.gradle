// This task generates documentation.
task gendocs(dependsOn:'build', type:Exec) {
	executable 'doxygen'
	args '.doxygen.config'
	standardOutput System.out
}

// Builds.
task build(type:Exec) {
	executable 'make'
	standardOutput System.out

}

// Cleans lib + generated folders.
task clean(type:Exec) {
	commandLine 'rm -rf docs/generated/html'
	standardOutput System.out
}

// Runs all tests.
task test {
	doLast { task ->
		def libs = [
			'core-avr-ds',
			'core-avr-logging',
			'core-avr-io',
			'core-avr-database',
			'core-avr-sensor']
		libs.each({ lib ->
			println "Running $lib tests..."
			
			exec {
				executable "$lib/build/Test.exe"
				standardOutput System.out
			}
		})
	}
}

// Generates a project archetype.
task genapi {
	doLast { task ->
		if (!task.project.hasProperty('api')) {
			println('No tests generated. Must be supplied with -Papi property.');
			return;
		}

		def api = task.project.api;
		def apiDir = new File(api);
		if (!apiDir.exists()) {
			apiDir.mkdir();
		}

		def srcDir = new File(apiDir, 'src');
		if (!srcDir.exists()) {
			srcDir.mkdir();
		}

		def testDir = new File(apiDir, 'test');
		if (!testDir.exists()) {
			testDir.mkdir();
		}

		// copy makefile
		def src = new File('templates/makefile.example')
		def dst = new File("$api/makefile")
		dst << src.text

		// prep test main
		dst = new File("$api/test/Main_${api}.cpp")
		if (!dst.createNewFile()) {
			println("Could not create ${dst.getAbsolutePath()}.")
			return;
		}
		dst << "\
#define CATCH_CONFIG_MAIN\n\
#include <catch.hpp>"

		println("Tests generated in ${api}/tests.");
	}
}