/*
 * This file contains utilities used in multiple projects.
 */

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'net.java.dev.jna:jna:3.4.0' 
		classpath 'net.java.dev.jna:platform:3.4.0' 
	}
}

import com.sun.jna.platform.win32.Kernel32;
import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.io.BufferedReader;
import java.text.SimpleDateFormat;
import java.util.Locale;

// This class redirects an input stream to an output stream.
public class StreamGobbler extends Thread {

	// source stream
	private final BufferedInputStream _source;

	// stream to redirect to
	private final BufferedOutputStream _dest;

	// Constructor.
	public StreamGobbler(InputStream source, OutputStream dest) {
		_source = new BufferedInputStream(source);
		_dest = new BufferedOutputStream(dest);
	}

	// Thread interface.
	public void run() {
		try {           
			byte[] b = new byte[100];
			int size = 0;

			while ((size = _source.read(b)) > 0) {
				_dest.write(b, 0, size)
			}

			_dest.flush()
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}
}

// Executes a shell command.
// 
// cmd - list of separate command line arguments.
ext.exec_cmd = { cmd, verbose ->
	//def verbose = project.hasProperty("verbose")

	def command = ""

	def str_cmd = []
	cmd.each {
		command = command + it + " "
		str_cmd << it.toString()
	}

	if (verbose) {
		println command
	}

	def redir_out = verbose ? System.out : new ByteArrayOutputStream()

	def pb = new ProcessBuilder(str_cmd)
	pb.redirectErrorStream(true)
	pb.directory(projectDir)

	def proc = pb.start()
	new StreamGobbler(proc.getInputStream(), redir_out).start()

	def retCode = proc.waitFor()
	if (retCode != 0) {
		if (!verbose) {
			println command
			System.out.print(new String(redir_out.toByteArray()))
		}
	}

	return retCode;
}